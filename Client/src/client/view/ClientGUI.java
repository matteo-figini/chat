package client.view;

import client.controller.Client;
import client.model.Message;
import java.awt.Color;
import java.io.IOException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;

/**
 *
 * @author matte
 */
public class ClientGUI extends javax.swing.JFrame {
    private Client client;
    private Thread readMessage;
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        initComponents();
        this.messagesPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jComboBox1 = new javax.swing.JComboBox<>();
        settingsPanel7 = new javax.swing.JPanel();
        userLabel = new javax.swing.JLabel();
        ipLabel = new javax.swing.JLabel();
        userText = new javax.swing.JTextField();
        ipText = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        messagesPanel = new javax.swing.JPanel();
        incomingMessagesPanel = new javax.swing.JPanel();
        incomingMessagesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        incomingMessagesText = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        writeMessageLabel = new javax.swing.JLabel();
        chooseReceiverCombo = new javax.swing.JComboBox<>();
        receiverLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageText = new javax.swing.JTextArea();
        sendMessageButton = new javax.swing.JButton();
        allMessagesWithLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        allMessagesWithText = new javax.swing.JTextPane();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        userLabel.setText("Username:");

        ipLabel.setText("Indirizzo IP:");

        connectButton.setText("Connetti");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanel7Layout = new javax.swing.GroupLayout(settingsPanel7);
        settingsPanel7.setLayout(settingsPanel7Layout);
        settingsPanel7Layout.setHorizontalGroup(
            settingsPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(connectButton)
                    .addGroup(settingsPanel7Layout.createSequentialGroup()
                        .addComponent(userLabel)
                        .addGap(18, 18, 18)
                        .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(ipLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsPanel7Layout.setVerticalGroup(
            settingsPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel)
                    .addComponent(ipLabel)
                    .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        incomingMessagesLabel.setText("Tutti i messaggi:");

        incomingMessagesText.setEditable(false);
        incomingMessagesText.setColumns(20);
        incomingMessagesText.setRows(5);
        jScrollPane1.setViewportView(incomingMessagesText);

        javax.swing.GroupLayout incomingMessagesPanelLayout = new javax.swing.GroupLayout(incomingMessagesPanel);
        incomingMessagesPanel.setLayout(incomingMessagesPanelLayout);
        incomingMessagesPanelLayout.setHorizontalGroup(
            incomingMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(incomingMessagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(incomingMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(incomingMessagesLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        incomingMessagesPanelLayout.setVerticalGroup(
            incomingMessagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(incomingMessagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(incomingMessagesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        writeMessageLabel.setText("Scrivi messaggio");

        chooseReceiverCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        chooseReceiverCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chooseReceiverComboFocusGained(evt);
            }
        });
        chooseReceiverCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseReceiverComboActionPerformed(evt);
            }
        });

        receiverLabel.setText("Destinatario:");

        messageLabel.setText("Messaggio:");

        messageText.setColumns(20);
        messageText.setRows(5);
        jScrollPane2.setViewportView(messageText);

        sendMessageButton.setText("Invia");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        allMessagesWithLabel.setText("Tutti i messaggi con: ");

        jScrollPane4.setViewportView(allMessagesWithText);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendMessageButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(receiverLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(writeMessageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(chooseReceiverCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(allMessagesWithLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(writeMessageLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseReceiverCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receiverLabel))
                .addGap(18, 18, 18)
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendMessageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(allMessagesWithLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout messagesPanelLayout = new javax.swing.GroupLayout(messagesPanel);
        messagesPanel.setLayout(messagesPanelLayout);
        messagesPanelLayout.setHorizontalGroup(
            messagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(incomingMessagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        messagesPanelLayout.setVerticalGroup(
            messagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(messagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(incomingMessagesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        client.closeProgram();
    }//GEN-LAST:event_formWindowClosing

    private void chooseReceiverComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseReceiverComboActionPerformed
        String username = (String) chooseReceiverCombo.getSelectedItem();
        printMessagesList(username);
    }//GEN-LAST:event_chooseReceiverComboActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Instaurazione della connessione
        String logMessage = "";
        client = new Client(ipText.getText(), userText.getText());
        logMessage = client.connectSocket();
        if (logMessage.equals("")) {
            System.exit(1);
        }
        else {
            messagesPanel.setVisible(true);
            readMessage = new Thread (new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        try {
                            byte[] encrypted, decrypted = null;
                            Message message = new Message();
                            message.setSender(client.getDataInputStream().readUTF());
                            message.setReceiver(client.getDataInputStream().readUTF());
                            int length = client.getDataInputStream().readInt();
                            if (length > 0) {
                                encrypted = new byte[length];
                                client.getDataInputStream().readFully(encrypted);
                                if (message.getReceiver().equalsIgnoreCase("all")) {
                                    BigInteger mittPublicE, mittPublicN;
                                    mittPublicE = new BigInteger(client.getDBConn().getPublicKeyE(message.getSender()));
                                    mittPublicN = new BigInteger(client.getDBConn().getPublicKeyN(message.getSender()));
                                    decrypted = client.getRSA().decrypt(encrypted, mittPublicE, mittPublicN);
                                } 
                                else {
                                    decrypted = client.getRSA().decrypt(encrypted, client.getRSA().getD(), client.getRSA().getN());
                                }
                            }
                            message.setMessage(new String(decrypted));
                            client.listaMessaggi.add(message);
                            incomingMessagesText.setText(incomingMessagesText.getText() + message.getSender() + " -> " + message.getReceiver() + ": " + message.getMessage()+ "\n");
                        } catch (IOException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });
            
            userText.setEditable(false);
            ipText.setEditable(false);
            readMessage.start();
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void chooseReceiverComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chooseReceiverComboFocusGained
        ArrayList<String> partecipanti = new ArrayList<String>();
        partecipanti = client.getDBConn().getParticipants(client.getUsername());
        chooseReceiverCombo.removeAllItems();
        for (String str : partecipanti) {
            chooseReceiverCombo.addItem(str);
        }
    }//GEN-LAST:event_chooseReceiverComboFocusGained

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        Message message = new Message();
        message.setSender(client.getUsername());
        message.setReceiver((String) chooseReceiverCombo.getSelectedItem());
        message.setMessage(messageText.getText());
        client.sendMessage(message);
        client.listaMessaggi.add(message);
        printMessagesList(message.getReceiver());
        this.messageText.setText("");
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void printMessagesList (String otherUser) {
        allMessagesWithText.setText("");
        allMessagesWithLabel.setText("Tutti i messaggi con " + otherUser);
        client.listaMessaggi.forEach((message) -> {
            if (message.getSender().equals(otherUser) || message.getReceiver().equals(otherUser)) {
                String areaText = allMessagesWithText.getText();
                if (message.getSender().equals(client.getUsername())) {
                    areaText += "ME -> ";
                }
                else {
                    areaText += message.getSender() + " -> ";
                }
                if (message.getReceiver().equals(client.getUsername())) {
                    areaText += "ME: ";
                }
                else {
                    areaText += message.getReceiver() + ": ";
                }
                areaText += message.getMessage() + "\n";
                allMessagesWithText.setText(areaText);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allMessagesWithLabel;
    private javax.swing.JTextPane allMessagesWithText;
    private javax.swing.JComboBox<String> chooseReceiverCombo;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel incomingMessagesLabel;
    private javax.swing.JPanel incomingMessagesPanel;
    private javax.swing.JTextArea incomingMessagesText;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JTextField ipText;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextArea messageText;
    private javax.swing.JPanel messagesPanel;
    private javax.swing.JLabel receiverLabel;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JPanel settingsPanel7;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userText;
    private javax.swing.JLabel writeMessageLabel;
    // End of variables declaration//GEN-END:variables
}